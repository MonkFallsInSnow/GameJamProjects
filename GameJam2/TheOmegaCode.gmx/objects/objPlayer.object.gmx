<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCharacter</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canMove = true;
playerSpeed = PLAYER_START_SPEED;
class = objClassSelectionControl.playerClass; //objGameControl.playerClass;
xp = 0;
name = " ";

levelUpDone = false;

image_speed = 0;
image_index = 0;

//door control switch
canOpen = false

atDoor = noone;

//controls player movement sound
isMoving = false;
sndChoice = 0;

changeWords = false;

letterNum[0] = "A"; letterNum[2] = "B"; letterNum[3] = "C"; letterNum[4] = "D"; 
letterNum[5] = "E"; letterNum[6] = "F"; letterNum[7] = "G"; letterNum[8] = "H";
letterNum[9] = "I"; letterNum[10] = "J"; letterNum[11] = "K"; letterNum[12] = "L";
letterNum[13] = "M"; letterNum[14] = "N"; letterNum[15] = "O"; letterNum[16] = "P";
letterNum[17] = "Q"; letterNum[18] = "R"; letterNum[19] = "S"; letterNum[20] = "T";
letterNum[21] = "U"; letterNum[22] = "V"; letterNum[23] = "W"; letterNum[24] = "X";
letterNum[25] = "Y"; letterNum[26] = "Z"; letterNum[27] = "0"; letterNum[28] = "1";
letterNum[29] = "2"; letterNum[30] = "3"; letterNum[31] = "4"; letterNum[32] = "5";
letterNum[33] = "6"; letterNum[34] = "7"; letterNum[35] = "8"; letterNum[36] = "9";

for(var i = 0; i &lt; 7; i++)
{
    if(i != 4)
    {
        playerName[i] = letterNum[irandom(36)];
    }
    else
    {
        playerName[i] = "-";
    }
    
    name += string(playerName[i]);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rmFinale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rmDeath);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//currentActionPoints = characterSheet[# headers.COL1, charSheetY.ACTION_POINTS];
//currentHitPoints = characterSheet[# headers.COL1, charSheetY.HP];
totalHitPoints = characterSheet[# headers.COL1, charSheetY.DURABILITY] * hpMod;
totalActionPoints = characterSheet[# headers.COL1, charSheetY.AI] * apMod;
totalEvasionChance = round(characterSheet[# headers.COL1, charSheetY.AGILITY] / evasionMod);
totalCritChance = round(characterSheet[# headers.COL1, charSheetY.PRECISION] / critMod);
totalAttackPower = characterSheet[# headers.COL1, charSheetY.TACTICS] * attPowerMod;
totalArmorRating = round(characterSheet[# headers.COL1, charSheetY.TACTICS] * attPowerMod);

//movement code
if(canMove)
{
    var animationSpeed = 0.5;
    isMoving = false;
    //Vertical movement
    if (keyboard_check(vk_up) || keyboard_check(ord('W')))
    {
        isMoving = true;
        if (hspeed == 0)
        {
            vspeed = -playerSpeed;
            switch(class)
            {
               case MELEE:
                    sprite_index = sprMeleeUp;    
                    break;
               case RANGED:
                    sprite_index = sprRangedUp;
                    break;
               /*case CONTROLLER:
                    sprite_index = sprControllerUp;
                    break;*/
               default:
                    break; 
            }
            image_speed = animationSpeed;
        }
    }
    else if (keyboard_check(vk_down) || keyboard_check(ord('S')))
    {
        isMoving = true;
        if (hspeed == 0)
        {
            vspeed = playerSpeed;
            switch(class)
            {
               case MELEE:
                    sprite_index = sprMeleeDown;    
                    break;
               case RANGED:
                    sprite_index = sprRangedDown;
                    break;
                    /*
               case CONTROLLER:
                    sprite_index = sprControllerDown;
                    break;
                    */
               default:
                    break; 
            }
            image_speed = animationSpeed;
        }
    }
    else
    {
        vspeed = 0;
        image_speed = 0;
    }
    //Horizontal movement
    if (keyboard_check(vk_left) || keyboard_check(ord('A')))
    {
        isMoving = true;
        if (vspeed == 0)
        {
            hspeed = -playerSpeed;
            switch(class)
            {
               case MELEE:
                    sprite_index = sprMeleeLeft;    
                    break;
               case RANGED:
                    sprite_index = sprRangedLeft;
                    break;
                    /*
               case CONTROLLER:
                    sprite_index = sprControllerLeft;
                    break;
                    */
               default:
                    break; 
            }
            image_speed = animationSpeed;
        }
    }
    else if (keyboard_check(vk_right) || keyboard_check(ord('D')))
    {
        isMoving = true;
        if (vspeed == 0)
        {
            hspeed = playerSpeed;
            switch(class)
            {
               case MELEE:
                    sprite_index = sprMeleeRight;    
                    break;
               case RANGED:
                    sprite_index = sprRangedRight;
                    break;
                    /*
               case CONTROLLER:
                    sprite_index = sprControllerRight;
                    break;
                    */
               default:
                    break; 
            }
            image_speed = animationSpeed;
        }
    }
    else
    {
        hspeed = 0;
    }
    
    if(isMoving)
    {
        if(room == rmClassSelection || (objGameControl.transitionDone &amp;&amp; room != rmBattle))
        {
            if(!audio_is_playing(sndPlayerWalk1) &amp;&amp; !audio_is_playing(sndPlayerWalk2))
            {
                switch(sndChoice)
                {
                    case 0:
                        audio_play_sound(sndPlayerWalk1,0.5,false);
                        sndChoice++;
                        break;
                    case 1:
                        audio_play_sound(sndPlayerWalk2,0.5,false);
                        sndChoice--;
                        break;
                    default:
                        break;
                }
            }
        }
    }
}
//updates the values used in the battle calculations upon leveling up
if(levelUpDone)
{ 
    objPlayer.characterSheet[# headers.COL1,charSheetY.HP] = objPlayer.totalHitPoints;
    objPlayer.characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] = objPlayer.totalActionPoints;
    objPlayer.characterSheet[# headers.COL1,charSheetY.EVASION_CHANCE] = objPlayer.totalActionPoints;
    objPlayer.characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] = objPlayer.totalEvasionChance;
    objPlayer.characterSheet[# headers.COL1,charSheetY.ATTACK_POWER] = objPlayer.totalAttackPower;
    objPlayer.characterSheet[# headers.COL1,charSheetY.ARMOR_RATING] = objPlayer.totalArmorRating;
    levelUpDone = false;
}

//player death
if(objGameControl.playerDead == false)
{
    var hp = characterSheet[# headers.COL1,charSheetY.HP];
    
    if( hp &lt;= 0)
    {   
        characterSheet[# headers.COL1,charSheetY.ALIVE] = false; 
        objGameControl.playerDead = true;            
        alarm[0] = 30;
    } 
}
else if(!characterSheet[# headers.COL1,charSheetY.ALIVE])
{
    characterSheet[# headers.COL1,charSheetY.HP] = 0;   
}

/*
//put the randomly generated name in the characterSheet
objPlayer.characterSheet[# headers.COL1, charSheetY.NAME] = playerName;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objRedButton">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// big red button code
if (keyboard_check_pressed(vk_space))
{
    changeWords = true;
    visible = false;
    canMove = false;
    audio_play_sound(sndEndExplosion,1,false);
    effect_create_above(ef_explosion, x, y, 1, c_orange);
    alarm[1] = 60;
    alarm[2] = 500;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objRoomTerminal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//upgrade terminal interaction code
if (keyboard_check_pressed(vk_space))
{
    objPlayer.visible = false;
    room_goto(rmUpgradeTerminal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objStopBattle">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this code will prevent anymore encoutners from occuring after the puzzle is solved and 
//the player has collided with objStopBattle
if(objPuzzleControl.puzzleComplete)
{
    objGameControl.stopBattle = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objRoomTransfer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objGameControl.transition = true;
canMove = false;
hspeed = 0;
vspeed = 0;
image_index = 0;
image_speed = 0;

if(room == rmClassSelection)
{
    x = 240;
    y = 532;
    room_goto(rmTutorial);
}
else if(room == rmTutorial)
{
    x = 1200;
    y = 1712;
    room_goto(rm1_0);
}
else if(room == rm1_0)
{
    x = 1220;
    y = 1712;
    room_goto(rm2_0);
}
else if(room == rm2_0)
{
    x = 1175;
    y = 1650;
    room_goto(rm3_0);
}
else if(room == rm3_0)
{
    x = 175;
    y = 1696;
    room_goto(rm4_0);
}
else if(room == rm4_0)
{
    x = 495;
    y = 640;
    room_goto(rm5_0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objWallParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//empty 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objNode">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//interact with nodes
atNode = other.id;

if(keyboard_check_pressed(vk_space))
{
    activateNode(objPuzzleControl.puzzleData,atNode);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDoor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>atDoor = other.id;

if(room == rmClassSelection)
{   
    with(atDoor)
    {
        image_speed = 0.1;
        
        if(open == false)
        {
            //plays door hiss sound once
            audio_play_sound(sndDoor,1,false);          
            open = true;
        }
    }
}
else if(room == rmTutorial ^^ room == rm1_0 ^^ room == rm2_0 ^^ room == rm3_0 ^^ room == rm4_0)
{
    with(atDoor)
    {
        if(objPuzzleControl.checkDoor)
        {
            if(locked &amp;&amp; open == false) //default. locked and closed
            {
                sprite_index = sprDoor;
                image_index = 0;
                image_speed = 0;
            }
            else if(locked == false &amp;&amp; open == false) //door was locked and closed, but is now unlocked and open
            {
                audio_play_sound(sndDoor,1,false);
                sprite_index = sprDoor;
                image_index = 0;
                image_speed = 0.1;
            }
            else if(locked &amp;&amp; open) //door was opened, but player has now closed and locked it
            {
                audio_play_sound(sndDoor,1,false);
                sprite_index = sprDoorClose
                image_index = 0;
                solid = true;
                image_speed = 0.1;
            }
            
            objPuzzleControl.checkDoor = false;
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>15,15</point>
    <point>15,15</point>
  </PhysicsShapePoints>
</object>
