<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = noone;
button = noone;
miss = false;
reverseEffect = false;
turnOver = false;

abilityType = noone;
abilityUsed = false;
critical = false;
evaded = false;
hurt = 0;
noAp = false;
damageDone = 0;
damageRecieved = 0;

playSound = false;

//defines a bright green color
c_bright_green = make_color_rgb(38,174,23);

//reset player action and energy points
with(objPlayer)
{
    characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] = totalActionPoints;
}

//ability damage modifiers
extraDamage1 = 10;
extraDamage2 = 15;
extraDamage3 = 20;
extraDamage4 = 25;
extraDamage5 = 30;

//makes moving around the set of buttons easier
xspot = 320;
yspot = 630;

buttons[0] = instance_create(5,595,objBattleGuiBox); //playerInfoBox
buttons[1] = instance_create(820,580,objBattleDialogBox); //battle dialog
buttons[2] = instance_create(xspot - 215,yspot + 100,objEndTurnButton); //end turn
buttons[3] = instance_create(xspot,yspot,objAbilityButton); //abilityBox1
buttons[4] = instance_create(xspot + 192,yspot,objAbilityButton); //abilityBox2
buttons[5] = instance_create(xspot + 384,yspot,objAbilityButton); //abilityBox3
buttons[6] = instance_create(xspot,yspot + 50,objAbilityButton); //abilityBox4
buttons[7] = instance_create(xspot + 192,yspot + 50,objAbilityButton); //abilityBox5
buttons[8] = instance_create(xspot + 384,yspot + 50,objAbilityButton); //abilityBox6
buttons[9] = instance_create(xspot,yspot + 100,objAbilityButton); //abilityBox7
buttons[10] = instance_create(xspot + 192,yspot + 100,objAbilityButton); //abilityBox8
buttons[11] = instance_create(xspot + 384,yspot + 100,objAbilityButton); //abilityBox9


//end turn button
endTurn = buttons[2];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ability calculations
if(target != noone &amp;&amp; button != noone)
{   
    var percentage = 100;
    var testDone = false;
    var chanceValue = random(percentage);
    reverseEffect = false;
    switch(button)
    {
        case ability1:
            if(objPlayer.abilities[# headers.COL1,abilityHeaderY.AQUIRED])
            {
                printBuffer = 0;
                
                if(objPlayer.class == MELEE) //extremity strike
                { 
                    with(objPlayer)
                    {
                        if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL1,abilityHeaderY.AP_COST])
                        {
                            audio_play_sound(sndStrike,0.5,false);
                        }
                        
                        damageOutput = characterSheet[# headers.COL1,charSheetY.TACTICS] * (irandom(characterSheet[# headers.COL1,charSheetY.TACTICS]) + 1);
                        abilities[# headers.COL1,abilityHeaderY.DAMAGE] = damageOutput;
                        battle(objPlayer,abilities[# headers.COL1,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL1,objStrike);
                    }
                }
                else if(objPlayer.class == RANGED) //shot
                {
                    with(objPlayer)
                    {
                        if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL1,abilityHeaderY.AP_COST])
                        {
                            audio_play_sound(sndShot,0.5,false);
                        }
                        
                        damageOutput = characterSheet[# headers.COL1,charSheetY.PRECISION] * (irandom(characterSheet[# headers.COL1,charSheetY.PRECISION]) + 1);
                        abilities[# headers.COL1,abilityHeaderY.DAMAGE] = damageOutput;
                        battle(objPlayer,abilities[# headers.COL1,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL1,objShot);
                    }
                }
                /*
                else if(objPlayer.class == CONTROLLER)
                {
                    
                }
                */
            }
            break;
            
            case ability2:
                if(objPlayer.abilities[# headers.COL2,abilityHeaderY.AQUIRED])
                {
                    printBuffer = 1;
                    if(objPlayer.class == MELEE) //extensible head strike
                    {       
                        with(objPlayer)
                        {
                            //chance to receieve damage from skill
                            var chance = 25;
                            objBattleControl.hurt = 10;
                            
                            if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL2,abilityHeaderY.AP_COST])
                            {
                                audio_play_sound(sndHeadbutt,0.5,false);
                            }
        
                            damageOutput = characterSheet[# headers.COL1,charSheetY.TACTICS] * (irandom(characterSheet[# headers.COL1,charSheetY.PRECISION]) + objBattleControl.extraDamage1);
                            abilities[# headers.COL2,abilityHeaderY.DAMAGE] = damageOutput;
                            if(chanceValue &lt;= chance)
                            {
                                objBattleControl.reverseEffect = true; 
                                //show_message("hurt"); //debug
                                var hp = characterSheet[# headers.COL1,charSheetY.HP];
                                hp -= objBattleControl.hurt;
                                characterSheet[# headers.COL1,charSheetY.HP] = hp;
                            }
                            battle(objPlayer,abilities[# headers.COL2,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL2,objHeadbutt);
                        }
                    }
                    else if(objPlayer.class == RANGED)
                    {
                        with(objPlayer) //laser screen
                        {
                            //chance to receieve damage from skill
                            var chance = 20;
                            objBattleControl.hurt = 10;
                           
                            if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL2,abilityHeaderY.AP_COST])
                            {
                                audio_play_sound(sndLaserScreen,0.5,false);
                            }
                            
                            damageOutput = characterSheet[# headers.COL1,charSheetY.PRECISION] * (irandom(characterSheet[# headers.COL1,charSheetY.PROCESSING]) + objBattleControl.extraDamage1);
                            abilities[# headers.COL2,abilityHeaderY.DAMAGE] = damageOutput;
                             
                            if(chanceValue &lt;= chance)
                            {
                                objBattleControl.reverseEffect = true;
                                //show_message("hurt"); //debug
                                characterSheet[# headers.COL1,charSheetY.HP] -= objBattleControl.hurt;
                            }  
                            battle(objPlayer,abilities[# headers.COL2,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL2,objLaserScreen);
                        }
                    }
                    /*
                    else if(objPlayer.class == CONTROLLER)
                    {
                        
                    }
                    */
            }
            break;
            
            
        case ability3:
            if(objPlayer.abilities[# headers.COL3,abilityHeaderY.AQUIRED])
            {
                printBuffer = 2;
                if(objPlayer.class == MELEE) //voltaic strike
                {          
                    with(objPlayer)
                    {
                    
                        if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL3,abilityHeaderY.AP_COST])
                        {
                            audio_play_sound(sndVoltaicStrike,0.5,false);
                        }
                        
                        damageOutput = characterSheet[# headers.COL1,charSheetY.TACTICS] * (irandom(characterSheet[# headers.COL1,charSheetY.TACTICS]) + objBattleControl.extraDamage2);
                        abilities[# headers.COL3,abilityHeaderY.DAMAGE] = damageOutput;
                        battle(objPlayer,abilities[# headers.COL3,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL3,objVoltaicStrike);
                    }
                }
                else if(objPlayer.class == RANGED) //energy lasso
                {
                    with(objPlayer)
                    {
                        //chance to receieve damage from skill
                        var chance = 25;
                        
                        if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL3,abilityHeaderY.AP_COST])
                        {
                            audio_play_sound(sndEnergyLasso,0.5,false);
                        }
                        
                        damageOutput = characterSheet[# headers.COL1,charSheetY.PRECISION] * (irandom(characterSheet[# headers.COL1,charSheetY.PROCESSING]) + objBattleControl.extraDamage1);
                        abilities[# headers.COL3,abilityHeaderY.DAMAGE] = damageOutput;
                        
                        if(chanceValue &lt;= chance)
                        {
                            objBattleControl.reverseEffect = true;            
                        }
                        
                        battle(objPlayer,abilities[# headers.COL3,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL3,objEnergyLasso);
                    }
                }
                /*
                else if(objPlayer.class == CONTROLLER)
                {
                    
                }
                */
            }
            break;
            
        case ability4:
            if(objPlayer.abilities[# headers.COL4,abilityHeaderY.AQUIRED])
            {
                printBuffer = 3;
                if(objPlayer.class == MELEE)
                {
                    
                    with(objPlayer) //Gyratory Strike
                    {
                        if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL4,abilityHeaderY.AP_COST])
                        {
                            audio_play_sound(sndGyroStrike,0.5,false);
                        }
                        
                        damageOutput = characterSheet[# headers.COL1,charSheetY.TACTICS] + irandom(characterSheet[# headers.COL1,charSheetY.PRECISION]) + irandom(characterSheet[# headers.COL1,charSheetY.AI]) + irandom(characterSheet[# headers.COL1,charSheetY.PROCESSING] + objBattleControl.extraDamage3);
                        abilities[# headers.COL4,abilityHeaderY.DAMAGE] = damageOutput;
                        battle(objPlayer,abilities[# headers.COL4,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL4,objGyroStrike);
                    }
                }
                else if(objPlayer.class == RANGED)
                {
                    with(objPlayer) //scavanged components
                    {   
                        if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL4,abilityHeaderY.AP_COST])
                        {
                            audio_play_sound(sndScavenge,0.5,false);
                        }
                            
                        damageOutput = characterSheet[# headers.COL1,charSheetY.DURABILITY] * (irandom(characterSheet[# headers.COL1,charSheetY.PROCESSING]) + objBattleControl.extraDamage1);
                        abilities[# headers.COL4,abilityHeaderY.DAMAGE] = damageOutput;
                        battle(objPlayer,abilities[# headers.COL4,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL4,objScavengeComponents);
                    }
                }
                /*
                else if(objPlayer.class == CONTROLLER)
                {
                    
                }
                */
            }
            break;
            
        case ability5:
            if(objPlayer.abilities[# headers.COL5,abilityHeaderY.AQUIRED])
            {
                printBuffer = 4;
                if(objPlayer.class == MELEE)
                {
                    with(objPlayer) //rend core
                    {
                        var chance = characterSheet[# headers.COL1, charSheetY.PRECISION] * 10;
                        
                        if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL5,abilityHeaderY.AP_COST])
                        {
                            audio_play_sound(sndRendCore,0.5,false);
                        }
                        
                        if(chanceValue &lt;= chance)
                        {
                            objBattleControl.miss = false;
                            battle(objPlayer,abilities[# headers.COL5,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL5,objRendCore);
                        }
                        else
                        {
                            objBattleControl.miss = true;
                            battle(objPlayer,abilities[# headers.COL5,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL5,objEmptyAnim);
                        }
                    }
                }
                else if(objPlayer.class == RANGED) //plasma burn
                {
                        miss = false;
                        with(objPlayer)
                        {
                            if(characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL5,abilityHeaderY.AP_COST])
                            {
                                audio_play_sound(sndPlasmaBurn,0.5,false);
                            }
                        
                            if(characterSheet[# headers.COL1, charSheetY.ACTION_POINTS] &gt;= abilities[# headers.COL5,abilityHeaderY.AP_COST])
                            {
                                characterSheet[# headers.COL1, charSheetY.HP] /= 2;
                            }
                            battle(objPlayer,abilities[# headers.COL5,abilityHeaderY.AP_COST],objBattleControl.target,headers.COL5,objPlasmaBurn);
                        }
                        
                }
                /*else if(objPlayer.class == CONTROLLER)
                {
                        
                }*/
            }
            break;
        default:
            break;  
    }
}
          
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(position_meeting(mouse_x,mouse_y,objGuiButtonParent))
{
    var tempButton = 0;
    tempButton = collision_point(mouse_x,mouse_y,objGuiButtonParent,false,true);
    if(target != noone)
    {
        button = collision_point(mouse_x,mouse_y,objGuiButtonParent,false,true);
    }
    else
    {
        //button = collision_point(mouse_x,mouse_y,objGuiButtonParent,false,true);
        button = noone;
    }
    
    if(tempButton == endTurn)
    {
        if(target != noone)
        {
            target.image_index = 0;
            target = noone;
        }
        
        turnOver = true;
        objPlayer.characterSheet[# headers.COL1,charSheetY.ACTION_POINTS] = objPlayer.totalActionPoints;
        for(var i = 0; i &lt; instance_number(objEnemy); i++)
        {
            if(i = 0)
            {
                playSound = true;
            }
            else
            {
                playSound = false;
            }
            enemy = instance_find(objEnemy,i);
            enemyAI(enemy,objPlayer);
        }
        turnOver = false;
        button = noone;
    }    
}

if(position_meeting(mouse_x,mouse_y,objEnemy))
{
    //select target
    if(target == noone)
    {
        target = collision_point(mouse_x, mouse_y,objEnemy,false,true);
        
        if(target != noone)
        {
            target.image_index = 1;
        }
    }
    //deselct target
    else if(target != noone)
    {      
        target.image_index = 0;
        target = noone;
    }
}
  
//match battle gui buttons with player abilities
ability1 = buttons[3];
ability2 = buttons[4];
ability3 = buttons[5];
ability4 = buttons[6];
ability5 = buttons[7];
/*ability6 = buttons[8];
ability7 = buttons[9];
ability8 = buttons[10];
ability9 = buttons[11];*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//randomize enemy encounters
//after first encounter, enemies will attack between 300 and 600 steps
objGameControl.encounterRate = irandom(300) + 300;
objGameControl.canFight = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rmBattle)
{
    var xpos = buttons[0].x + 10;
    var ypos = buttons[0].y + 10;
    var counter = 3;
    
    //loop through the abilities that the player can access and draw on panel
    for (var i = 1; i &lt; ds_grid_width(objPlayer.abilities); i++)
    {
        draw_set_font(font_UI);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        if(objPlayer.abilities[# i,abilityHeaderY.AQUIRED] == true)
        {
            with (buttons[counter])
            {
                if (distance_to_point(mouse_x,mouse_y) == 0)
                {
                    draw_set_color(c_white);
                } 
                else
                {
                    draw_set_color(objBattleControl.c_bright_green);
                }
            }
            draw_text(buttons[counter].x,buttons[counter].y-8,objPlayer.abilities[# i,abilityHeaderY.NAME]); //draw ability names in the GUI            counter++;
            draw_text(buttons[counter].x-10,buttons[counter].y + 10,objPlayer.abilities[# i,abilityHeaderY.AP_COST]);
            draw_text(buttons[counter].x + 20,buttons[counter].y + 10,"ap");
            counter++;
        }
    }
    
    //set font colors and alignment
    draw_set_color(objBattleControl.c_bright_green);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
 
    //draw health
    draw_text(xpos,ypos,"Durability: ");
    draw_text(xpos + 90,ypos,objPlayer.characterSheet[# headers.COL1,charSheetY.HP]);
    draw_healthbar(xpos,ypos + 20, xpos + 180,ypos + 30, objPlayer.characterSheet[# headers.COL1,charSheetY.HP],c_black,c_red,c_green,0,false,true);
    
    //draw ap
    draw_text(xpos,ypos + 42,"AP: ");
    draw_text(xpos + 90,ypos + 42,objPlayer.characterSheet[# headers.COL1, charSheetY.ACTION_POINTS]);
    draw_healthbar(xpos,(ypos + 45) + 25, xpos + 180,(ypos + 42) + 15, objPlayer.characterSheet[# headers.COL1,charSheetY.ACTION_POINTS],c_black,c_yellow,c_blue,0,false,true);
    
    //draw end turn button
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    with (objEndTurnButton)
    {
        if (distance_to_point(mouse_x,mouse_y) == 0)
        {
           draw_set_color(c_white);
        }
        else
        {
           draw_set_color(objBattleControl.c_bright_green);
        }
    } 
    
    draw_text(endTurn.x,endTurn.y,"End Turn");
    
   if(abilityUsed)
   {
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(objBattleControl.c_bright_green);
        var abilityName = objPlayer.abilities[# headers.COL1 + printBuffer,charSheetY.NAME];
        
        draw_text(buttons[1].x + 10,buttons[1].y + 10,"-Initiating")
        draw_text(buttons[1].x + 10,buttons[1].y + 30,abilityName);
            
        if(evaded)
        {
            draw_text(buttons[1].x + 10,buttons[1].y + 50,"-Missed  target");
            if(abilityName = "Plasma Burn")
            {
                draw_text(buttons[1].x + 10,buttons[1].y + 70,"-System Overload");
                draw_text(buttons[1].x + 10,buttons[1].y + 90,"-50% durability loss"); 
            }    
        }
        else 
        {
            if(abilityType == BASIC)
            {
                if(critical)
                {
                    draw_text(buttons[1].x + 10,buttons[1].y + 50,"-Hit = Critial  hit;");
                    draw_text(buttons[1].x + 10,buttons[1].y + 70,"Damage  =");
                    draw_text(buttons[1].x + 90,buttons[1].y + 70,string(damageRecieved));
                }
                else
                {
                    draw_text(buttons[1].x + 10,buttons[1].y + 50,"Damage  =");
                    draw_text(buttons[1].x + 90,buttons[1].y + 50,string(damageRecieved));
                }
            }
            else if(abilityType == AOE)
            {   
                draw_text(buttons[1].x + 10,buttons[1].y + 50,"-Multiple targets hit");
                draw_text(buttons[1].x + 10,buttons[1].y + 80,"Total damage  =");
                draw_text(buttons[1].x + 130,buttons[1].y + 80,string(totalDamage));
            }
            else if(abilityType == INST_KILL)
            {
                if(miss)
                {
                    draw_text(buttons[1].x + 10,buttons[1].y + 50,"-Failure to perform");
                }
                else if(miss == false)
                {
                    draw_text(buttons[1].x + 10,buttons[1].y + 50,"-Target  destroyed");
                    if(abilityName = "Plasma Burn")
                    {
                       draw_text(buttons[1].x + 10,buttons[1].y + 70,"-System Overload");
                       draw_text(buttons[1].x + 10,buttons[1].y + 90,"-50% durability loss"); 
                    }
                }
            }
            else if(abilityType == ADV)
            {
                draw_text(buttons[1].x + 10,buttons[1].y + 50,"-Damage  =");
                draw_text(buttons[1].x + 90,buttons[1].y + 50,string(damageRecieved));
                draw_text(buttons[1].x + 6,buttons[1].y + 70,"Action Points += ");
                draw_text(buttons[1].x + 130,buttons[1].y + 70,string(damageRecieved));
            }
            else if(abilityType == HEAL)
            {
                draw_text(buttons[1].x + 10,buttons[1].y + 50,"-Repairing...");
                draw_text(buttons[1].x + 10,buttons[1].y + 70,"Durability +=");
                draw_text(buttons[1].x + 110,buttons[1].y + 70,objPlayer.abilities[# headers.COL4,abilityHeaderY.DAMAGE]);
            }
        }
        if(reverseEffect)
        {
            //draw_text(buttons[1].x + 10,buttons[1].y + 130,"-You lost ");
            //draw_text(buttons[1].x + 110,buttons[1].y + 130,string(damageDone));
                
            if(abilityName == "Headbutt")
            {
                draw_text(buttons[1].x + 10,buttons[1].y + 110,"-Malfunction");
                draw_text(buttons[1].x + 10,buttons[1].y + 130," Durability -=");
                draw_text(buttons[1].x + 110,buttons[1].y + 130,string(objBattleControl.hurt));
            }
            else if(abilityName == "Laser Screen")
            {
                draw_text(buttons[1].x + 10,buttons[1].y + 110,"-System overload");
                draw_text(buttons[1].x + 10,buttons[1].y + 130,"AP   -=")
                draw_text(buttons[1].x + 110,buttons[1].y + 130,string(damageDone));;
            }
            else if(abilityName == "Energy Lasso")
            {
                draw_text(buttons[1].x + 10,buttons[1].y + 110,"-Skill backfired");
                draw_text(buttons[1].x + 10,buttons[1].y + 130,"AP   -=");
                draw_text(buttons[1].x + 110,buttons[1].y + 130,string(damageDone));
            }
        }
    }
    if(noAp)
    {
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_set_color(objBattleControl.c_bright_green);
        draw_text(buttons[1].x + 10,buttons[1].y + 10,"Power drained...")
    }
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
