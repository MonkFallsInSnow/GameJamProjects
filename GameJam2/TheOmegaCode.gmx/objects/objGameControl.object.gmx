<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>battleStarted = false;
upgradePoints = 0;
canFight = true;
playerRoom = " ";
checkBattle = true;
encounterRate = 300;
startEncounter = false;
playerReturnX = 0;
playerReturnY = 0;
transition = false;
transitionDone = false;
stopBattle = false;
playerDead = false;
xpDisplayed = 0;
levelUp = false;
levelUpAbilities = false;
battleWon = false;

//set initial font properties
draw_set_halign(fa_left);
draw_set_valign(fa_left);
draw_set_font(font_UI);
draw_set_color(c_black);

//list of enemies
enemyList = ds_list_create();
ds_list_add(enemyList,objEnemy1,objEnemy2,objEnemy3,objEnemy4,objEnemy5,objEnemy6,objEnemy7,objEnemy8,objEnemy9);

//debug
randomize();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(stopBattle == false &amp;&amp; room != rmUpgradeTerminal &amp;&amp; room != rm5_0 &amp;&amp; room != rmFinale)
{
    audio_play_sound(sndBattleWarning,1,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(room_width / 2, room_height / 2, objInfoBox);
battleWon = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>background_alpha[0] -= 0.01
transition = true;
canFight = false;

if(background_alpha[0] &lt;= 0)
{
    transition = false;
    objPlayer.canMove = true;
    transitionDone = true;
    canFight = true;
    stopBattle = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objPlayer.visible = true;
objPlayer.canMove = true;
objPlayer.x = playerReturnX;
objPlayer.y = playerReturnY;
objLevelControl.leveledUp = false;
objLevelControl.newAbility = false;
xpDisplayed = 0;
battleWon = false;
room_goto(playerRoom);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rmUpgradeTerminal || room == rm5_0 || room == rmFinale)
{
    battleStarted = false;
}
else if(transitionDone == false)
{
    battleStarted = false
}
else if(room == rmBattle)
{
    battleStarted = false;

}
else if(stopBattle)
{
    battleStarted = false;
}
else
{
    battleStarted = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rmClassSelection ^^ room == rmUpgradeTerminal ^^ room == rmBattle)
{
    window_set_cursor(cr_cross);
}
else
{
    window_set_cursor(cr_none);
}

//start battle
if(room == rmBattle)
{ 
    if(!instance_exists(objEnemy))
    {   
        if(checkBattle)
        {
            alarm[3] = 15;
            alarm[1] = 130;
            checkBattle = false;
        } 
    }
}

//battle encounter code
if(room == rmTutorial ^^ room == rm1_0 ^^ room == rm2_0 ^^ room == rm3_0 ^^ room == rm4_0)
{
    if(objPlayer.characterSheet[# headers.COL1, charSheetY.ALIVE])
    {
        playerRoom = room;
        playerReturnX = objPlayer.x;
        playerReturnY = objPlayer.y;
        
        if(canFight)
        {
            alarm[4] = encounterRate - 25;
            alarm[0] = encounterRate;
            canFight = false;
        }
    }
}

if(battleStarted)
{
    objPlayer.visible = false;
    objPlayer.canMove = false;
    battleStarted = false;
    checkBattle = true;
    room_goto(rmBattle);  
}

//room tranisition effect
if(transition)
{
    transition = false;
    alarm[2] = 2;
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rmBattle &amp;&amp; !instance_exists(objEnemy) &amp;&amp; battleWon)
{
    draw_set_color(c_green);
    draw_set_font(font_UI);
    draw_set_valign(fa_left);
    draw_text(objInfoBox.x - (objInfoBox.sprite_width / 2) + 5, objInfoBox.y - (objInfoBox.sprite_height / 2), "Victory!");
    draw_text(objInfoBox.x - (objInfoBox.sprite_width / 2) + 5, (objInfoBox.y - (objInfoBox.sprite_height / 2)) + 20 , "XP Gained:");
    draw_text((objInfoBox.x - (objInfoBox.sprite_width / 2))+ 105, (objInfoBox.y - (objInfoBox.sprite_height / 2)) + 20 , string(xpDisplayed));
    
    if(objLevelControl.leveledUp)
    {
        draw_text(objInfoBox.x - (objInfoBox.sprite_width / 2) + 5, (objInfoBox.y - (objInfoBox.sprite_height / 2)) + 40 , "Upgrade Possible");
        
        if(objLevelControl.newAbility)
        {
            draw_text(objInfoBox.x - (objInfoBox.sprite_width / 2), (objInfoBox.y - (objInfoBox.sprite_height / 2)) + 60 , "New Algorithm Learned");
        }
    }
}
else
{
    battleWon = false;
}

if(room == rm5_0)
{
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    if(!objPlayer.changeWords)
    {
        draw_text(objInfoBox.x - 45, objInfoBox.y - 23,"Do not push#red button.");
    }
    else
    {
        draw_text(objInfoBox.x - 45, objInfoBox.y - 23,"I told you...");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
