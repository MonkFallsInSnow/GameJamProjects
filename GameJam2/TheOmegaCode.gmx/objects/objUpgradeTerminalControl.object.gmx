<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//defines a bright green color
c_bright_green = make_color_rgb(38,174,23);

//stats screen is the default
screen = 0;

//makes sure that the most recent room and x/y stored 
//correspond to a room and position outside of the 
//terminal rooms
recentRoom = " ";
previousScreen = objGameControl.playerRoom;
recentX = 0;
recentY = 0;

if (screen == 0)
{   
    if (previousScreen == rmUpgradeAbilities)
    {
        recentX = objGameControl.playerReturnX;
        recentY = objGameControl.playerReturnY;
        recentRoom = global.room_came_from;
    }
    else
    {
        recentX = objGameControl.playerReturnX;
        recentY = objGameControl.playerReturnY;
        recentRoom = objGameControl.playerRoom;
    }
}

//initial ability upgrade points
//abilityPointsInitial = objLevelControl.abilityPoints;

//Holds character sheet info
durPoints = objPlayer.characterSheet[# headers.COL1, charSheetY.DURABILITY];
aiPoints = objPlayer.characterSheet[# headers.COL1, charSheetY.AI];
processingPoints = objPlayer.characterSheet[# headers.COL1, charSheetY.PROCESSING];
tacticsPoints = objPlayer.characterSheet[# headers.COL1, charSheetY.TACTICS];
agilityPoints = objPlayer.characterSheet[# headers.COL1, charSheetY.AGILITY];
luckPoints = objPlayer.characterSheet[# headers.COL1, charSheetY.LUCK];
precisionPoints = objPlayer.characterSheet[# headers.COL1, charSheetY.PRECISION];
speedPoints = objPlayer.characterSheet[# headers.COL1, charSheetY.PROPULSION];

//Other very exciting variables for making sure that the player cannot
//subtract more points than s/he started with
durabilityPointsInitial = durPoints;
aiPointsInitial = aiPoints;
processingPointsInitial = processingPoints;
tacticsPointsInitial = tacticsPoints;
agilityPointsInitial = agilityPoints;
luckPointsInitial = luckPoints;
precisionPointsInitial = precisionPoints;
speedPointsInitial = speedPoints;

//ability acquisition status value array
/*for (i=1;i&lt;ds_grid_width(objPlayer.abilities);i++)
{
    abilityStatus[i] = objPlayer.abilities[# i,abilityHeaderY.AQUIRED];
}*/

//Stats Screen
if (room == rmUpgradeTerminal)
{
    //starting pointbox positions
    //xposition is the upgrade terminal object width minus 240
    //yposition is the upgrade terminal object height minus 456
    xposition = 640;
    yposition = 280;
    
    //Stat Point Boxes
    durabilityPointBox = instance_create(xposition,yposition,objPointBox);
    aiPointBox = instance_create(xposition,yposition + 40,objPointBox);
    processingPointBox = instance_create(xposition,yposition + 80,objPointBox);
    tacticsPointBox = instance_create(xposition,yposition + 120,objPointBox);
    agilityPointBox = instance_create(xposition,yposition +160,objPointBox);
    luckPointBox = instance_create(xposition,yposition + 200,objPointBox);
    precisionPointBox = instance_create(xposition,yposition + 240,objPointBox);
    speedPointBox = instance_create(xposition,yposition + 280,objPointBox);
    remainingPointBox = instance_create(xposition,yposition + 336,objPointBox);
    
    //Add Point Buttons
    //x = corresponding pointbox xposition + 28
    //y = corresponding pointbox yposition - 8
    //positions based on pointbox object dimensions (16 by 16) and
    //plus button dimensions (8 by 8)
    plusDurability = instance_create(xposition + 28,yposition - 8,objPlusPoint);
    plusAi = instance_create(xposition + 28,yposition + 32,objPlusPoint);
    plusProcessing = instance_create(xposition + 28,yposition + 72,objPlusPoint);
    plusTactics = instance_create(xposition + 28,yposition + 112,objPlusPoint);
    plusAgility = instance_create(xposition + 28,yposition + 148,objPlusPoint);
    plusLuck = instance_create(xposition + 28,yposition + 192,objPlusPoint);
    plusPrecision = instance_create(xposition + 28,yposition + 232,objPlusPoint);
    plusSpeed = instance_create(xposition + 28,yposition + 272,objPlusPoint);
    
    //Subtract Point Buttons
    //x = corresponding pointbox xposition + 28
    //y = corresponding pointbox yposition + 8
    //minus button object dimensions are 8 by 8
    minusDurability = instance_create(xposition + 28,yposition + 8,objMinusPoint);
    minusAi = instance_create(xposition + 28,yposition + 48,objMinusPoint);
    minusProcessing = instance_create(xposition + 28,yposition + 88,objMinusPoint);
    minusTactics = instance_create(xposition + 28,yposition + 128,objMinusPoint);
    minusAgility = instance_create(xposition + 28,yposition + 168,objMinusPoint);
    minusLuck = instance_create(xposition + 28,yposition + 208,objMinusPoint);
    minusPrecision = instance_create(xposition + 28,yposition + 248,objMinusPoint);
    minusSpeed = instance_create(xposition + 28,yposition + 288,objMinusPoint);
    
    //create instance of the upgrade button and assign to variable
    //x position is the same as the upgrade terminal box created below - 132 (half the
    //button sprite's width)
    //y position is the upgrade terminal box's y position plus 288
    //upgradeButton = instance_create(380,672,objUpgradeButton);
    
    //create instance of the upgrade button and assign to variable
    //x position is the same as the upgrade terminal box created below + 132 (half the
    //button sprite's width)
    //y position is the upgrade terminal box's y position plus 288
    //abilityUpgradeButton = instance_create(644,672,objUpgradeButton);
    

}
//Abilities Screen
/*if (room = rmUpgradeAbilities)
{
    xpos = 512;
    ypos = 200;
    
    abilityPointsBox = instance_create(xpos+84,ypos-60,objPointBox);
    
    //create ability selection buttons
    var i;
    for (i=1; i&lt;ds_grid_width(objPlayer.abilities); i++)
    {
        abilityBtn[i] = instance_create(xpos,ypos,objEndTurnButton);
        ypos += 60;
    }
}*/

//create other buttons
/*upgradeButton = instance_create(380,672,objUpgradeButton);
screenButton = instance_create(644,672,objUpgradeButton);*/

//Upgrade Button
upgradeButton = instance_create(512,672,objUpgradeButton);

//create instance of the box itself
upgradeTerminalBox = instance_create(512,384,objUpgradeTerminal);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stats Screen
if (room = rmUpgradeTerminal)
{
    buttonClick = collision_point(mouse_x,mouse_y,objGuiButtonParent,false,true);
    
    if (buttonClick != noone)
    {

        if (objGameControl.upgradePoints &gt; 0)
        {
            switch(buttonClick)
            {
                case plusDurability:
                    if (durPoints &gt;=0)
                    {
                        durPoints++;
                        objGameControl.upgradePoints--;
                    }
                    break;
                case minusDurability:
                    if ((durPoints &gt; 0) &amp;&amp; (durPoints &gt; durabilityPointsInitial))
                    {
                        durPoints--;
                        objGameControl.upgradePoints++;
                    }
                    break;
                case plusAi:
                    if (aiPoints &gt;= 0)
                    {
                        aiPoints++;
                        objGameControl.upgradePoints--;    
                    }       
                    break;
                case minusAi:
                    if ((aiPoints &gt; 0) &amp;&amp; (aiPoints &gt; aiPointsInitial))
                    {
                        aiPoints--;
                        objGameControl.upgradePoints++;
                    }
                    break;
                case plusProcessing:
                    if (processingPoints &gt;= 0)
                    {
                        processingPoints++;
                        objGameControl.upgradePoints--;
                    }
                    break;
                case minusProcessing:
                    if ((processingPoints &gt; 0) &amp;&amp; (processingPoints &gt; processingPointsInitial))
                    {
                        processingPoints--;
                        objGameControl.upgradePoints++;
                    }
                    break;
                case plusTactics:
                    if (tacticsPoints &gt;= 0)
                    {
                        tacticsPoints++;
                        objGameControl.upgradePoints--;
                    }
                    break;
                case minusTactics:
                    if ((tacticsPoints &gt; 0) &amp;&amp; (tacticsPoints &gt; tacticsPointsInitial))
                    {
                        tacticsPoints--;
                        objGameControl.upgradePoints++;
                    }
                    break;
                case plusAgility:
                    if (agilityPoints &gt;= 0)
                    {
                        agilityPoints++;
                        objGameControl.upgradePoints--;
                    }
                    break;
                case minusAgility:
                    if ((agilityPoints &gt; 0) &amp;&amp; (agilityPoints &gt; agilityPointsInitial))
                    {
                        agilityPoints--;
                        objGameControl.upgradePoints++;
                    }
                    break;
                case plusLuck:
                    if (luckPoints &gt;= 0)
                    {
                        luckPoints++;
                        objGameControl.upgradePoints--;
                    }
                    break;
                case minusLuck:
                    if ((luckPoints &gt; 0) &amp;&amp; (luckPoints &gt; luckPointsInitial))
                    {
                        luckPoints--;
                        objGameControl.upgradePoints++;
                    }
                    break;
                case plusPrecision:
                    if (precisionPoints &gt;= 0)
                    {
                        precisionPoints++;
                        objGameControl.upgradePoints--;
                    }
                    break;
                case minusPrecision:
                    if ((precisionPoints &gt; 0) &amp;&amp; (precisionPoints &gt; precisionPointsInitial))
                    {
                        precisionPoints--;
                        objGameControl.upgradePoints++;
                    }
                    break;
                case plusSpeed:
                    if (speedPoints &gt;= 0)
                    {
                        speedPoints++;
                        objGameControl.upgradePoints--;
                    }
                    break;
                case minusSpeed:
                    if ((speedPoints &gt; 0) &amp;&amp; (speedPoints &gt; speedPointsInitial))
                    {
                        speedPoints--;
                        objGameControl.upgradePoints++;
                    }
                    break;
                case upgradeButton:
                    //update character sheet
                    objPlayer.characterSheet[# headers.COL1, charSheetY.DURABILITY] = durPoints;
                    objPlayer.characterSheet[# headers.COL1, charSheetY.AI] = aiPoints;
                    objPlayer.characterSheet[# headers.COL1, charSheetY.PROCESSING] = processingPoints;
                    objPlayer.characterSheet[# headers.COL1, charSheetY.TACTICS] = tacticsPoints;
                    objPlayer.characterSheet[# headers.COL1, charSheetY.AGILITY] = agilityPoints;
                    objPlayer.characterSheet[# headers.COL1, charSheetY.LUCK] = luckPoints;
                    objPlayer.characterSheet[# headers.COL1, charSheetY.PRECISION] = precisionPoints;
                    objPlayer.characterSheet[# headers.COL1, charSheetY.PROPULSION] = speedPoints;
                    //set the player's x and y to those in the most recent room
                    //objPlayer.x = objGameControl.playerReturnX;
                    //objPlayer.y = objGameControl.playerReturnY;
                    objPlayer.x = recentX;
                    objPlayer.y = recentY;
                    objPlayer.visible = true;
                    //updates the player's ability acquisition status          
                    /*var i;
                    var acquisitionStatus;
                    for (i=1; i&lt;ds_grid_width(objPlayer.abilities); i++)
                    {   
                        acquisitionStatus = objPlayer.abilities[# i,abilityHeaderY.AQUIRED];
                        if (acquisitionStatus)
                        {
                            objPlayer.abilities[# i,abilityHeaderY.AQUIRED] = abilityStatus[i];
                        }
                    }  */
                    
                    //restore player health
                    objPlayer.characterSheet[# headers.COL1, charSheetY.HP] = objPlayer.totalHitPoints;
                    
                    //go to most recent room
                    room_goto(recentRoom);
                    break;
                case screenButton:
                    //go to ability upgrade screen
                    room_goto(rmUpgradeAbilities);
                    screen = 1;
                    break;
                default:
                    break;
                }
            }
            else if (objGameControl.upgradePoints == 0)
            {
                switch (buttonClick)
                {
                    case minusDurability:
                        if ((durPoints &gt; 0) &amp;&amp; (durPoints &gt; durabilityPointsInitial))
                        {
                            durPoints--;
                            objGameControl.upgradePoints++;
                        }
                        break;
                    case minusAi:
                        if ((aiPoints &gt; 0) &amp;&amp; (aiPoints &gt; aiPointsInitial))
                        {
                            aiPoints--;
                            objGameControl.upgradePoints++;   
                        }
                        break;
                    case minusProcessing:
                        if ((processingPoints &gt; 0) &amp;&amp; (processingPoints &gt; processingPointsInitial))
                        {
                            processingPoints--;
                            objGameControl.upgradePoints++;
                        }
                        break;
                    case minusTactics:
                        if ((tacticsPoints &gt; 0) &amp;&amp; (tacticsPoints &gt; tacticsPointsInitial))
                        {
                            tacticsPoints--;
                            objGameControl.upgradePoints++;
                        }
                        break;
                    case minusAgility:
                        if ((agilityPoints &gt; 0) &amp;&amp; (agilityPoints &gt; agilityPointsInitial))
                        {
                            agilityPoints--;
                            objGameControl.upgradePoints++;
                        }
                        break;
                    case minusLuck:
                        if ((luckPoints &gt; 0) &amp;&amp; (luckPoints &gt; luckPointsInitial))
                        {
                            luckPoints--;
                            objGameControl.upgradePoints++;
                        }
                        break;
                    case minusPrecision:
                        if ((precisionPoints &gt; 0) &amp;&amp; (precisionPoints &gt; precisionPointsInitial))
                        {
                            precisionPoints--;
                            objGameControl.upgradePoints++;
                        }
                        break;
                    case minusSpeed:
                        if ((speedPoints &gt; 0) &amp;&amp; (speedPoints &gt; speedPointsInitial))
                        {
                            speedPoints--;
                            objGameControl.upgradePoints++;
                        }
                        break;

                    case upgradeButton:
                        //added this
                        objPlayer.levelUpDone = true;
                        //update character sheet
                        objPlayer.characterSheet[# headers.COL1, charSheetY.DURABILITY] = durPoints;
                        objPlayer.characterSheet[# headers.COL1, charSheetY.AI] = aiPoints;
                        objPlayer.characterSheet[# headers.COL1, charSheetY.PROCESSING] = processingPoints;
                        objPlayer.characterSheet[# headers.COL1, charSheetY.TACTICS] = tacticsPoints;
                        objPlayer.characterSheet[# headers.COL1, charSheetY.AGILITY] = agilityPoints;
                        objPlayer.characterSheet[# headers.COL1, charSheetY.LUCK] = luckPoints;
                        objPlayer.characterSheet[# headers.COL1, charSheetY.PRECISION] = precisionPoints;
                        objPlayer.characterSheet[# headers.COL1, charSheetY.PROPULSION] = speedPoints;                   
                        //set the player's x and y to those in the most recent room
                        objPlayer.x = recentX;
                        objPlayer.y = recentY;
                        objPlayer.visible = true;
                        //updates the player's ability acquisition status          
                        /*var i;
                        var acquisitionStatus;
                        for (i=1; i&lt;ds_grid_width(objPlayer.abilities); i++)
                        {   
                            acquisitionStatus = objPlayer.abilities[# i,abilityHeaderY.AQUIRED];
                            if (acquisitionStatus)
                            {
                                objPlayer.abilities[# i,abilityHeaderY.AQUIRED] = abilityStatus[i];
                            }
                        }*/                                           
                        //go to most recent room
                        
                        //restore player health
                        objPlayer.characterSheet[# headers.COL1, charSheetY.HP] = objPlayer.totalHitPoints;
                    
                        room_goto(recentRoom);
                            break;                    
                   /* case screenButton:
                        //go to abilities upgrade screen
                        screen = 1;
                        room_goto(rmUpgradeAbilities);
                        break;*/
                        
                    default:
                        break;
                }  
            }
    }
}
//Abilities Screen
/*if (room = rmUpgradeAbilities)
{
    buttonClick = collision_point(mouse_x,mouse_y,objGuiButtonParent,false,true);
    if (buttonClick != noone)
    {
        if (buttonClick == screenButton)
        {
            room_goto(rmUpgradeTerminal);
        }
        else if (buttonClick == upgradeButton)
        {
            //update the character sheet with new stat values, if they've changed and the player
            //did not select the upgrade button in the stats upgrade terminal screen
            objPlayer.characterSheet[# headers.COL1, charSheetY.DURABILITY] = durPoints;
            objPlayer.characterSheet[# headers.COL1, charSheetY.AI] = aiPoints;
            objPlayer.characterSheet[# headers.COL1, charSheetY.PROCESSING] = processingPoints;
            objPlayer.characterSheet[# headers.COL1, charSheetY.TACTICS] = tacticsPoints;
            objPlayer.characterSheet[# headers.COL1, charSheetY.AGILITY] = agilityPoints;
            objPlayer.characterSheet[# headers.COL1, charSheetY.LUCK] = luckPoints;
            objPlayer.characterSheet[# headers.COL1, charSheetY.PRECISION] = precisionPoints;
            objPlayer.characterSheet[# headers.COL1, charSheetY.PROPULSION] = speedPoints;
            //set player's x and y to those in the most recent room
            objPlayer.x = recentX;
            objPlayer.y = recentY;
            //updates the player's ability acquisition status          
            var i;
            var acquisitionStatus;
            for (i=1; i&lt;ds_grid_width(objPlayer.abilities); i++)
            {   
                acquisitionStatus = objPlayer.abilities[# i,abilityHeaderY.AQUIRED];
                if (acquisitionStatus)
                {
                    objPlayer.abilities[# i,abilityHeaderY.AQUIRED] = abilityStatus[i];
                }
            }           
            room_goto(recentRoom);        
        }
        else
        {
            var i;
            //var acquisitionStatus;
            for (i=1; i&lt;ds_grid_width(objPlayer.abilities); i++)
            {   
                //acquisitionStatus = objPlayer.abilities[# i,abilityHeaderY.AQUIRED];
                if (buttonClick == abilityBtn[i])
                {
                    if (abilityStatus[i] == true)
                    {
                        abilityStatus[i] = false;
                        objLevelControl.abilityPoints++;
                    }
                    else
                    {
                        if (objLevelControl.abilityPoints&gt;0)
                        {                        
                            abilityStatus[i] = true;
                            objLevelControl.abilityPoints--;
                        }
                    }
                }
            }
        }
    }
}  */ 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objGameControl.canFight = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Upgrade Terminal Title
draw_set_color(c_bright_green);
draw_text(512, 58,"Upgrade Terminal")

//Stats Screen
if (room == rmUpgradeTerminal)
{       
    //Text color, font, and alignment
    draw_set_color(c_black);
    draw_set_font(font_UI);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    
    //Player info labels
    draw_text(xposition - 256, yposition - 144, "Name: ");
    draw_text(xposition - 256, yposition - 112, "Level: ");
    draw_text(xposition - 256, yposition - 80, "HP: ");
    
    //Player info
    draw_text(xposition - 160, yposition - 144, objPlayer.characterSheet[# headers.COL1,charSheetY.NAME]);
    draw_text(xposition - 160, yposition - 112, objPlayer.characterSheet[# headers.COL1,charSheetY.LEVEL]);
    draw_text(xposition - 160, yposition - 80, objPlayer.characterSheet[# headers.COL1,charSheetY.HP]);
    
    
    draw_set_valign(fa_top);
    
    //Stat Labels
    draw_text(durabilityPointBox.x - 256, durabilityPointBox.y - 8,"Frame Durability");
    draw_text(aiPointBox.x - 256, aiPointBox.y - 8,"Artifical Intelligence");
    draw_text(processingPointBox.x - 256,processingPointBox.y - 8,"Processing Power");
    draw_text(tacticsPointBox.x - 256,tacticsPointBox.y - 8,"Tactical Computing");
    draw_text(agilityPointBox.x - 256,agilityPointBox.y - 8,"Maneuverability");
    draw_text(luckPointBox.x - 256,luckPointBox.y - 8,"Probability Matrix");
    draw_text(precisionPointBox.x - 256,precisionPointBox.y - 8,"Targeting Precision");
    draw_text(speedPointBox.x - 256,speedPointBox.y - 8,"Propulsion");
    draw_text(remainingPointBox.x - 256,remainingPointBox.y - 8, "Upgrade Points");
    
    //Stat Values
    draw_set_halign(fa_center);
    draw_set_color(c_white);
    draw_text(durabilityPointBox.x, durabilityPointBox.y - 8,durPoints);
    draw_text(aiPointBox.x, aiPointBox.y - 8,aiPoints);
    draw_text(processingPointBox.x,processingPointBox.y - 8,processingPoints);
    draw_text(tacticsPointBox.x,tacticsPointBox.y - 8,tacticsPoints);
    draw_text(agilityPointBox.x,agilityPointBox.y - 8,agilityPoints);
    draw_text(luckPointBox.x,luckPointBox.y - 8,luckPoints);
    draw_text(precisionPointBox.x,precisionPointBox.y - 8,precisionPoints);
    draw_text(speedPointBox.x,speedPointBox.y - 8,speedPoints);
    
    //Upgrade Points
    draw_text(remainingPointBox.x,remainingPointBox.y - 8,objGameControl.upgradePoints);
    
    //Upgrade Button Text
    draw_set_color(c_black);
    draw_text(upgradeButton.x,upgradeButton.y - 8,"Upgrade");
    
    //Ability Upgrade Button Text
    //draw_text(screenButton.x, screenButton.y - 8,"Abilities");
}
//Abilities Screen
/*if (room == rmUpgradeAbilities)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    
    //Upgrade Button Text
    draw_set_color(c_black);
    draw_text(upgradeButton.x,upgradeButton.y,"Upgrade");
    
    //Ability Upgrade Button Text
    draw_text(screenButton.x, screenButton.y,"Stats");
    
    //Remaining Ability Points Label
    draw_text(abilityPointsBox.x-100,abilityPointsBox.y,"Ability Upgrade Points");
    
    //Remaining Ability Points    
    draw_set_color(c_white);
    draw_text(abilityPointsBox.x, abilityPointsBox.y, objLevelControl.abilityPoints);
    
    //draw ability names on selection buttons
    var i;
    for (i=1; i &lt; ds_grid_width(objPlayer.abilities); i++)
    {
        draw_set_color(c_bright_green);
        
        if (abilityStatus[i])
        {
            draw_set_color(c_bright_green);
        }
        else
        {
            draw_set_color(c_gray);
        }      
        draw_text(abilityBtn[i].x,abilityBtn[i].y,objPlayer.abilities[# i,abilityHeaderY.NAME]);
        ypos += 60;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
