<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//used for determining ability leveling eligibility based on
//completing the door puzzle every other room level 
//currentRoomLevel = 0;
//oddRoomLevel = true;

/*//used to get the current level and update the character sheet
levelNow = objPlayer.characterSheet[# headers.COL1,charSheetY.LEVEL];
*/
//used to determine how many abilities a player can add
abilityPoints = 0;

//not absolutely necessary, but it de-clutters level up code
xpNow = objPlayer.characterSheet[# headers.COL1, charSheetY.XP];

//used in xp-based leveling 
xpLevelStep = 500;
xpIncr = 500;

//used to inform user if the character has leveled/gained an ability after a battle
leveledUp = false;
newAbility = false;

//room level grid x-axis headers
enum roomsX
{    
    ROOM_ID = 0,    
    LEVEL_NUM = 1
}

//Room grid to hold the rooms and their corresponding level numbers. 
//add rooms and expand the grid as necessary
roomGrid = ds_grid_create(2,3);

ds_grid_add(roomGrid,0,0,rm1_0);
ds_grid_add(roomGrid,0,1,rm2_0);
ds_grid_add(roomGrid,0,2,rm3_0);

ds_grid_add(roomGrid,1,0,1);
ds_grid_add(roomGrid,1,1,2);
ds_grid_add(roomGrid,1,2,3);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//used to get the current level and xp and update the character sheet
levelNow = objPlayer.characterSheet[# headers.COL1,charSheetY.LEVEL];
xpNow = objPlayer.characterSheet[# headers.COL1, charSheetY.XP];

//Stat Leveling

//if player's current xp is greater than or equal to the max xp necessary
//to level up, player can level. max xp is raised by a certain increment and
//that increment is doubled each level

if (xpNow &gt;= xpLevelStep)
{
    xpLevelStep += xpIncr;
    xpIncr = xpIncr * 2;
    leveledUp = true;
    //if player can level up, add two upgrade points to the total available for use
    //and increase the player's level by one
    objGameControl.upgradePoints+=2;
    levelNow++;
    objPlayer.characterSheet[# headers.COL1,charSheetY.LEVEL] = levelNow;
            
    //Ability Leveling
    //the below code levels abilities every other player level
    //if (levelNow % 2 == 0 &amp;&amp; !instance_exists(objEnemy))
    if (levelNow % 2 == 0)
    {
        newAbility = true;
        switch (levelNow)
        {
            case 2:
                objPlayer.abilities[# headers.COL2,abilityHeaderY.AQUIRED] = true;
                break;
            case 4:
                objPlayer.abilities[# headers.COL3,abilityHeaderY.AQUIRED] = true;
                break;
            case 6:
                objPlayer.abilities[# headers.COL4,abilityHeaderY.AQUIRED] = true;
                break;      
            case 8:
                objPlayer.abilities[# headers.COL5,abilityHeaderY.AQUIRED] = true;
                break;
            default:
                break;
        }
    }
}





/*
//The below code is if we want to level abilities based on completing the door
//puzzle every other room level
//find the level number of the current room
for (var i = 0; i &lt;= ds_grid_height(roomGrid);i++)
{
    if (roomGrid[# roomsX.ROOM_ID,i] == objGameControl.playerRoom)
    {
        currentRoomLevel = roomGrid[# roomsX.LEVEL_NUM,i]
    }
}

//check if the current room level number is odd
if (currentRoomLevel mod 2 == 1)
{
    oddRoomLevel = true;
}
else
{
    oddRoomLevel = false;
}

//if the room level number is odd and the door puzzle has been solved, 
//player gains an ability
if (oddRoomLevel == true &amp;&amp; objDoor.locked == false)
{
    objGameControl.levelUpAbilities = true;
}
//if player can level up abilities, add one ability point
if (objGameControl.levelUpAbilities == true)
{
    abilityPoints++;
    objGameControl.levelUpAbilities = false;
}
*/



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
